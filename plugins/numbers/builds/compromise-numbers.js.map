{"version":3,"file":"compromise-numbers.js","sources":["../src/numbers/find.js","../src/numbers/convert/toNumber/findModifiers.js","../src/numbers/convert/toNumber/data.js","../src/numbers/convert/toNumber/validate.js","../src/numbers/convert/toNumber/parseDecimals.js","../src/numbers/convert/toNumber/parseNumeric.js","../src/numbers/convert/toNumber/parseFractions.js","../src/numbers/convert/toNumber/index.js","../src/numbers/parse.js","../src/numbers/_agreeUnits.js","../src/numbers/convert/_toString.js","../src/numbers/convert/toText/index.js","../src/numbers/convert/toOrdinal/numOrdinal.js","../src/numbers/convert/toOrdinal/textOrdinal.js","../src/numbers/convert/_symbols.js","../src/numbers/convert/makeNumber.js","../src/numbers/methods.js","../data/currencies.js","../src/money/parse.js","../src/money/methods.js","../src/fractions/parse.js","../src/fractions/methods.js","../src/tagger.js","../src/tags.js","../data/lexicon.js","../src/index.js"],"sourcesContent":["const tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty'\nconst teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen'\n\n// this is a bit of a mess\nconst findNumbers = function(doc, n) {\n  let match = doc.match('#Value+')\n\n  //\"50 83\"\n  if (match.has('#NumericValue #NumericValue')) {\n    //a comma may mean two numbers\n    if (match.has('#Value @hasComma #Value')) {\n      match.splitAfter('@hasComma')\n    } else if (match.has('#NumericValue #Fraction')) {\n      match.splitAfter('#NumericValue #Fraction')\n    } else {\n      match = match.splitAfter('#NumericValue')\n    }\n  }\n  //three-length\n  if (match.has('#Value #Value #Value') && !match.has('#Multiple')) {\n    //twenty-five-twenty\n    if (match.has('(' + tens + ') #Cardinal #Cardinal')) {\n      match = match.splitAfter('(' + tens + ') #Cardinal')\n    }\n  }\n\n  //two-length ones\n  if (match.has('#Value #Value')) {\n    //june 21st 1992 is two seperate values\n    if (match.has('#NumericValue #NumericValue')) {\n      match = match.splitOn('#Year')\n    }\n    //sixty fifteen\n    if (match.has('(' + tens + ') (' + teens + ')')) {\n      match = match.splitAfter('(' + tens + ')')\n    }\n    //\"72 82\"\n    let double = match.match('#Cardinal #Cardinal')\n    if (double.found && !match.has('(point|decimal)')) {\n      //not 'two hundred'\n      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {\n        //one proper way, 'twenty one', or 'hundred one'\n        if (!double.has('(' + tens + ') #Cardinal') && !double.has('#Multiple #Value')) {\n          // double = double.firstTerm()\n          double.terms().forEach(d => {\n            match = match.splitOn(d)\n          })\n        }\n      }\n    }\n    //seventh fifth\n    if (match.match('#Ordinal #Ordinal').match('#TextValue').found && !match.has('#Multiple')) {\n      //the one proper way, 'twenty first'\n      if (!match.has('(' + tens + ') #Ordinal')) {\n        match = match.splitAfter('#Ordinal')\n      }\n    }\n    //fifth five\n    if (match.has('#Ordinal #Cardinal')) {\n      match = match.splitBefore('#Cardinal+')\n    }\n    //five 2017 (support '5 hundred', and 'twenty 5'\n    if (match.has('#TextValue #NumericValue') && !match.has('(' + tens + '|#Multiple)')) {\n      match = match.splitBefore('#NumericValue+')\n    }\n  }\n  //5-8\n  if (match.has('#NumberRange')) {\n    match = match.splitAfter('#NumberRange')\n  }\n  //grab (n)th result\n  if (typeof n === 'number') {\n    match = match.get(n)\n  }\n  return match\n}\nmodule.exports = findNumbers\n","//support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5\nconst findModifiers = str => {\n  const mults = [\n    {\n      reg: /^(minus|negative)[\\s\\-]/i,\n      mult: -1,\n    },\n    {\n      reg: /^(a\\s)?half[\\s\\-](of\\s)?/i,\n      mult: 0.5,\n    },\n    //  {\n    //   reg: /^(a\\s)?quarter[\\s\\-]/i,\n    //   mult: 0.25\n    // }\n  ]\n  for (let i = 0; i < mults.length; i++) {\n    if (mults[i].reg.test(str) === true) {\n      return {\n        amount: mults[i].mult,\n        str: str.replace(mults[i].reg, ''),\n      }\n    }\n  }\n  return {\n    amount: 1,\n    str: str,\n  }\n}\n\nmodule.exports = findModifiers\n","module.exports = {\n  ones: {\n    zeroth: 0,\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  },\n  teens: {\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n    thirteen: 13,\n    fourteen: 14,\n    fifteen: 15,\n    sixteen: 16,\n    seventeen: 17,\n    eighteen: 18,\n    nineteen: 19,\n  },\n  tens: {\n    twentieth: 20,\n    thirtieth: 30,\n    fortieth: 40,\n    fourtieth: 40,\n    fiftieth: 50,\n    sixtieth: 60,\n    seventieth: 70,\n    eightieth: 80,\n    ninetieth: 90,\n    twenty: 20,\n    thirty: 30,\n    forty: 40,\n    fourty: 40,\n    fifty: 50,\n    sixty: 60,\n    seventy: 70,\n    eighty: 80,\n    ninety: 90,\n  },\n  multiples: {\n    hundredth: 100,\n    thousandth: 1000,\n    millionth: 1e6,\n    billionth: 1e9,\n    trillionth: 1e12,\n    quadrillionth: 1e15,\n    quintillionth: 1e18,\n    sextillionth: 1e21,\n    septillionth: 1e24,\n    hundred: 100,\n    thousand: 1000,\n    million: 1e6,\n    billion: 1e9,\n    trillion: 1e12,\n    quadrillion: 1e15,\n    quintillion: 1e18,\n    sextillion: 1e21,\n    septillion: 1e24,\n    grand: 1000,\n  },\n  fractions: {\n    a: 1,\n    first: 1/1,\n    second: 1/2,\n    half: 1/2,\n    quarter: 1/4,\n    third: 1/3,\n    fourth: 1/4,\n    fifth: 1/5,\n    sixth: 1/6,\n    seventh: 1/7,\n    eighth: 1/8,\n    ninth: 1/9,\n    tenth: 1/10,\n    eleventh: 1/11,\n    twelfth: 1/12,\n    thirteenth: 1/13,\n    fourteenth: 1/14,\n    fifteenth: 1/15,\n    sixteenth: 1/16,\n    seventeenth: 1/17,\n    eighteenth: 1/18,\n    nineteenth: 1/19,\n    twentieth: 1/20,\n    thirtieth: 1/30,\n    fortieth: 1/40,\n    fourtieth: 1/40,\n    fiftieth: 1/50,\n    sixtieth: 1/60,\n    seventieth: 1/70,\n    eightieth: 1/80,\n    ninetieth: 1/90,\n    hundredth: 1/100,\n    thousandth: 1/1000,\n    millionth: 1/1e6,\n    billionth: 1/1e9,\n    trillionth: 1/1e12,\n    quadrillionth: 1/1e15,\n    quintillionth: 1/1e18,\n    sextillionth: 1/1e21,\n    septillionth: 1/1e24,\n  },\n}\n","const words = require('./data')\n\n//prevent things like 'fifteen ten', and 'five sixty'\nconst isValid = (w, has) => {\n  if (words.ones.hasOwnProperty(w)) {\n    if (has.ones || has.teens) {\n      return false\n    }\n  } else if (words.teens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  } else if (words.tens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  }\n  return true\n}\nmodule.exports = isValid\n","const words = require('./data')\n\n//concatenate into a string with leading '0.'\nconst parseDecimals = function(arr) {\n  let str = '0.'\n  for (let i = 0; i < arr.length; i++) {\n    let w = arr[i]\n    if (words.ones.hasOwnProperty(w) === true) {\n      str += words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      str += words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      str += words.tens[w]\n    } else if (/^[0-9]$/.test(w) === true) {\n      str += w\n    } else {\n      return 0\n    }\n  }\n  return parseFloat(str)\n}\n\nmodule.exports = parseDecimals\n","//parse a string like \"4,200.1\" into Number 4200.1\nconst parseNumeric = str => {\n  //remove ordinal - 'th/rd'\n  str = str.replace(/1st$/, '1')\n  str = str.replace(/2nd$/, '2')\n  str = str.replace(/3rd$/, '3')\n  str = str.replace(/([4567890])r?th$/, '$1')\n  //remove prefixes\n  str = str.replace(/^[$€¥£¢]/, '')\n  //remove suffixes\n  str = str.replace(/[%$€¥£¢]$/, '')\n  //remove commas\n  str = str.replace(/,/g, '')\n  //split '5kg' from '5'\n  str = str.replace(/([0-9])([a-z\\u00C0-\\u00FF]{1,2})$/, '$1')\n  return str\n}\n\nmodule.exports = parseNumeric\n","const words = require('./data')\n\n//concatenate into a string with leading '0.'\nconst parseFractions = function (arr) {\n  // console.log('parsing fraction:')\n  // console.log(arr)\n  let multiplier = 1\n  for (let i = 0; i < arr.length; i++) {\n    let w = arr[i]\n    if (words.fractions.hasOwnProperty(w) === true) {\n      multiplier *= words.fractions[w]\n    } else if (words.fractions.hasOwnProperty(w.slice(0, -1)) === true) {\n      multiplier *= words.fractions[w.slice(0, -1)]\n    } else if (words.ones.hasOwnProperty(w) === true) {\n      multiplier *= words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      multiplier *= words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      multiplier *= words.tens[w]\n    } else if (/^[0-9]$/.test(w) === true) {\n      multiplier *= w\n    } else {\n      return 0\n    }\n  }\n  return multiplier\n}\n\nmodule.exports = parseFractions\n","const findModifiers = require('./findModifiers')\nconst words = require('./data')\nconst isValid = require('./validate')\nconst parseDecimals = require('./parseDecimals')\nconst parseNumeric = require('./parseNumeric')\nconst parseFraction = require('./parseFractions')\nconst improperFraction = /^([0-9,\\. ]+)\\/([0-9,\\. ]+)$/\n\n//some numbers we know\nconst casualForms = {\n  // 'a few': 3,\n  'a couple': 2,\n  'a dozen': 12,\n  'two dozen': 24,\n  zero: 0,\n}\n\nconst isFractional = (term) => {\n  return term !== 'a' && (!!words.fractions[term] || !!words.fractions[term.slice(0, -1)])\n}\n\nconst toPrecisionNumber = (num) => {\n  return Number(num.toPrecision(4))\n}\n\n// a 'section' is something like 'fifty-nine thousand'\n// turn a section into something we can add to - like 59000\nconst section_sum = (obj) => {\n  return Object.keys(obj).reduce((sum, k) => {\n    sum += obj[k]\n    return sum\n  }, 0)\n}\n\n//turn a string into a number\nconst parse = function (str, isFraction, depth = 0) {\n  // console.log(`parsing: '${str}', depth: ${depth}, isFraction: ${isFraction}`)\n  //convert some known-numbers\n  if (casualForms.hasOwnProperty(str) === true) {\n    return casualForms[str]\n  }\n  //'a/an' is 1\n  if (str === 'a' || str === 'an') {\n    return 1\n  }\n  const modifier = findModifiers(str)\n  str = modifier.str\n  let last_mult = null\n  let has = {}\n  let sum = 0\n  let isNegative = false\n  const terms = str.split(/[ -]/)\n  // const isFraction = findFraction(terms)\n  for (let i = 0; i < terms.length; i++) {\n    let w = terms[i]\n    w = parseNumeric(w)\n\n    if (!w || w === 'and') {\n      continue\n    }\n    if (w === '-' || w === 'negative') {\n      isNegative = true\n      continue\n    }\n    if (w.charAt(0) === '-') {\n      isNegative = true\n      w = w.substr(1)\n    }\n\n    //decimal mode\n    if (w === 'point') {\n      sum += section_sum(has)\n      sum += parseDecimals(terms.slice(i + 1, terms.length))\n      sum *= modifier.amount\n      return sum\n    }\n\n    //improper fraction\n    const fm = w.match(improperFraction)\n    if (fm) {\n      const num = parseFloat(fm[1].replace(/[, ]/g, ''))\n      const denom = parseFloat(fm[2].replace(/[, ]/g, ''))\n      if (denom) {\n        sum += num / denom || 0\n      }\n      continue\n    }\n\n    if (isFraction && terms.length === 1 && isFractional(w)) {\n      return parseFraction([terms[terms.length - 1]])\n    }\n\n    //prevent mismatched units, like 'seven eleven' if not a fraction\n    if (isValid(w, has) === false || (isFraction && isFractional(w) && terms.length > 1)) {\n      if (isFraction) {\n        sum += section_sum(has)\n        let subterms = terms.slice(i)\n        // console.log(subterms)\n        let fractional = parse(subterms.join(' '), isFraction, depth + 1)\n        let prev = parse(terms[i - 1])\n        if (\n          sum === 0 ||\n          terms[i - 1] === 'and' ||\n          (terms[i - 2] === 'and' && terms[i - 1] === 'a')\n        ) {\n          sum += fractional\n        } else if (prev > 19 && prev < 100) {\n          sum = toPrecisionNumber(1 / toPrecisionNumber(sum + 1 / fractional))\n        } else {\n          sum *= fractional\n        }\n        return sum\n      } else {\n        return null\n      }\n    }\n\n    //buildOut section, collect 'has' values\n    if (/^[0-9\\.]+$/.test(w)) {\n      has['ones'] = parseFloat(w) //not technically right\n    } else if (words.ones.hasOwnProperty(w) === true) {\n      has['ones'] = words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      has['teens'] = words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      has['tens'] = words.tens[w]\n    } else if (words.multiples.hasOwnProperty(w) === true) {\n      let mult = words.multiples[w]\n\n      //something has gone wrong : 'two hundred five hundred'\n      //possibly because it's a fraction\n      if (mult === last_mult) {\n        return null\n      }\n      //support 'hundred thousand'\n      //this one is tricky..\n      if (mult === 100 && terms[i + 1] !== undefined) {\n        if (!isFraction || !isFractional(terms[i + 1])) {\n          // has['hundreds']=\n          const w2 = terms[i + 1]\n          if (words.multiples[w2]) {\n            mult *= words.multiples[w2] //hundredThousand/hundredMillion\n            i += 1\n          }\n        }\n      }\n      //natural order of things\n      //five thousand, one hundred..\n      if (last_mult === null || mult < last_mult) {\n        sum += (section_sum(has) || 1) * mult\n        last_mult = mult\n        has = {}\n      } else {\n        //maybe hundred .. thousand\n        sum += section_sum(has)\n        last_mult = mult\n        sum = (sum || 1) * mult\n        has = {}\n      }\n    }\n  }\n  //dump the remaining has values\n  sum += section_sum(has)\n  //post-process add modifier\n  sum *= modifier.amount\n  sum *= isNegative ? -1 : 1\n  //dont return 0, if it went straight-through\n  if (sum === 0 && Object.keys(has).length === 0) {\n    return null\n  }\n  return sum\n}\n\nmodule.exports = parse\n","const toNumber = require('./convert/toNumber')\n\nconst parseNumeric = function (str, p, isFraction) {\n  str = str.replace(/,/g, '')\n  //parse a numeric-number (easy)\n  let arr = str.split(/^([^0-9]*)([0-9.,]*)([^0-9]*)$/)\n  if (arr && arr[2] && p.terms().length < 2) {\n    let num = parseFloat(arr[2] || str)\n    //ensure that num is an actual number\n    if (typeof num !== 'number') {\n      num = null\n    }\n    // strip an ordinal off the suffix\n    let suffix = arr[3] || ''\n    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {\n      suffix = ''\n    }\n    // support M for million, k for thousand\n    if (suffix === 'm' || suffix === 'M') {\n      num *= 1000000\n      suffix = ''\n    }\n    if (suffix === 'k' || suffix === 'k') {\n      num *= 1000\n      suffix = ''\n    }\n    return {\n      prefix: arr[1] || '',\n      num: isFraction ? 1 / num : num,\n      suffix: suffix,\n    }\n  }\n  return null\n}\n\n// get a numeric value from this phrase\nconst parseNumber = function (p, isFraction = false) {\n  let str = p.text('reduced')\n  // is it in '3,123' format?\n  let hasComma = /[0-9],[0-9]/.test(p.text('text'))\n  // parse a numeric-number like '$4.00'\n  let res = parseNumeric(str, p, isFraction)\n  if (res !== null) {\n    res.hasComma = hasComma\n    return res\n  }\n  //parse a text-numer (harder)\n  let num = toNumber(str, isFraction)\n  return {\n    hasComma: hasComma,\n    prefix: '',\n    num: num,\n    suffix: '',\n  }\n}\nmodule.exports = parseNumber\n","// handle 'one bottle', 'two bottles'\nconst agreeUnits = function (agree, val, obj) {\n  if (agree === false) {\n    return\n  }\n  let unit = val.lookAhead('^(#Unit|#Noun)')\n  // don't do these\n  if (unit.has('(#Address|#Money|#Percent)') || val.has('#Ordinal')) {\n    return\n  }\n  if (obj.num === 1) {\n    unit.nouns().toSingular()\n  } else if (unit.has('#Singular')) {\n    unit.nouns().toPlural()\n  }\n}\nmodule.exports = agreeUnits\n","/**\n * turn big numbers, like 2.3e+22, into a string with a ton of trailing 0's\n * */\nconst numToString = function(n) {\n  if (n < 1000000) {\n    return String(n)\n  }\n  let str\n  if (typeof n === 'number') {\n    str = n.toFixed(0)\n  } else {\n    str = n\n  }\n  if (str.indexOf('e+') === -1) {\n    return str\n  }\n  return str\n    .replace('.', '')\n    .split('e+')\n    .reduce(function(p, b) {\n      return p + Array(b - p.length + 2).join(0)\n    })\n}\nmodule.exports = numToString\n// console.log(numToString(2.5e+22));\n","const toString = require('../_toString')\n/**\n * turns an integer/float into.ber, like 'fifty-five'\n */\n\nconst tens_mapping = [\n  ['ninety', 90],\n  ['eighty', 80],\n  ['seventy', 70],\n  ['sixty', 60],\n  ['fifty', 50],\n  ['forty', 40],\n  ['thirty', 30],\n  ['twenty', 20],\n]\nconst ones_mapping = [\n  '',\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen',\n  'fourteen',\n  'fifteen',\n  'sixteen',\n  'seventeen',\n  'eighteen',\n  'nineteen',\n]\n\nconst sequence = [\n  [1e24, 'septillion'],\n  [1e20, 'hundred sextillion'],\n  [1e21, 'sextillion'],\n  [1e20, 'hundred quintillion'],\n  [1e18, 'quintillion'],\n  [1e17, 'hundred quadrillion'],\n  [1e15, 'quadrillion'],\n  [1e14, 'hundred trillion'],\n  [1e12, 'trillion'],\n  [1e11, 'hundred billion'],\n  [1e9, 'billion'],\n  [1e8, 'hundred million'],\n  [1e6, 'million'],\n  [100000, 'hundred thousand'],\n  [1000, 'thousand'],\n  [100, 'hundred'],\n  [1, 'one'],\n]\n\n//turn number into an array of magnitudes, like [[5, million], [2, hundred]]\nconst breakdown_magnitudes = function(num) {\n  let working = num\n  let have = []\n  sequence.forEach(a => {\n    if (num >= a[0]) {\n      let howmany = Math.floor(working / a[0])\n      working -= howmany * a[0]\n      if (howmany) {\n        have.push({\n          unit: a[1],\n          count: howmany,\n        })\n      }\n    }\n  })\n  return have\n}\n\n//turn numbers from 100-0 into their text\nconst breakdown_hundred = function(num) {\n  let arr = []\n  if (num > 100) {\n    return arr //something bad happened..\n  }\n  for (let i = 0; i < tens_mapping.length; i++) {\n    if (num >= tens_mapping[i][1]) {\n      num -= tens_mapping[i][1]\n      arr.push(tens_mapping[i][0])\n    }\n  }\n  //(hopefully) we should only have 20-0 now\n  if (ones_mapping[num]) {\n    arr.push(ones_mapping[num])\n  }\n  return arr\n}\n\n/** print-out 'point eight nine'*/\nconst handle_decimal = num => {\n  const names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n  let arr = []\n  //parse it out like a string, because js math is such shit\n  let str = toString(num)\n  let decimal = str.match(/\\.([0-9]+)/)\n  if (!decimal || !decimal[0]) {\n    return arr\n  }\n  arr.push('point')\n  let decimals = decimal[0].split('')\n  for (let i = 0; i < decimals.length; i++) {\n    arr.push(names[decimals[i]])\n  }\n  return arr\n}\n\n/** turns an integer into a textual number */\nconst to_text = function(num) {\n  // handle zero, quickly\n  if (num === 0 || num === '0') {\n    return 'zero' // no?\n  }\n  //big numbers, north of sextillion, aren't gonna work well..\n  //keep them small..\n  if (num > 1e21) {\n    num = toString(num)\n  }\n  let arr = []\n  //handle negative numbers\n  if (num < 0) {\n    arr.push('minus')\n    num = Math.abs(num)\n  }\n  //break-down into units, counts\n  let units = breakdown_magnitudes(num)\n  //build-up the string from its components\n  for (let i = 0; i < units.length; i++) {\n    let unit_name = units[i].unit\n    if (unit_name === 'one') {\n      unit_name = ''\n      //put an 'and' in here\n      if (arr.length > 1) {\n        arr.push('and')\n      }\n    }\n    arr = arr.concat(breakdown_hundred(units[i].count))\n    arr.push(unit_name)\n  }\n  //also support decimals - 'point eight'\n  arr = arr.concat(handle_decimal(num))\n  //remove empties\n  arr = arr.filter(s => s)\n  if (arr.length === 0) {\n    arr[0] = ''\n  }\n  return arr.join(' ')\n}\n\nmodule.exports = to_text\n\n// console.log(to_text(-1000.8));\n","const toString = require('../_toString')\n\n/**\n * turn a number like 5 into an ordinal like 5th\n */\nconst numOrdinal = function(num) {\n  if (!num && num !== 0) {\n    return null\n  }\n  //the teens are all 'th'\n  let tens = num % 100\n  if (tens > 10 && tens < 20) {\n    return String(num) + 'th'\n  }\n  //the rest of 'em\n  const mapping = {\n    0: 'th',\n    1: 'st',\n    2: 'nd',\n    3: 'rd',\n  }\n  let str = toString(num)\n  let last = str.slice(str.length - 1, str.length)\n  if (mapping[last]) {\n    str += mapping[last]\n  } else {\n    str += 'th'\n  }\n  return str\n}\n\nmodule.exports = numOrdinal\n","const textValue = require('../toText')\n// const toString = require('../_toString')\n\nconst irregulars = {\n  one: 'first',\n  two: 'second',\n  three: 'third',\n  five: 'fifth',\n  eight: 'eighth',\n  nine: 'ninth',\n  twelve: 'twelfth',\n  twenty: 'twentieth',\n  thirty: 'thirtieth',\n  forty: 'fortieth',\n  fourty: 'fourtieth',\n  fifty: 'fiftieth',\n  sixty: 'sixtieth',\n  seventy: 'seventieth',\n  eighty: 'eightieth',\n  ninety: 'ninetieth',\n}\n\n/**\n * convert a javascript number to 'twentieth' format\n * */\nconst textOrdinal = num => {\n  let words = textValue(num).split(' ')\n  //convert the last number to an ordinal\n  let last = words[words.length - 1]\n  if (irregulars.hasOwnProperty(last)) {\n    words[words.length - 1] = irregulars[last]\n  } else {\n    words[words.length - 1] = last.replace(/y$/, 'i') + 'th'\n  }\n  return words.join(' ')\n}\n\nmodule.exports = textOrdinal\n","const prefixes = {\n  '¢': 'cents',\n  $: 'dollars',\n  '£': 'pounds',\n  '¥': 'yen',\n  '€': 'euros',\n  '₡': 'colón',\n  '฿': 'baht',\n  '₭': 'kip',\n  '₩': 'won',\n  '₹': 'rupees',\n  '₽': 'ruble',\n  '₺': 'liras',\n}\nconst suffixes = {\n  '%': 'percent',\n  s: 'seconds',\n  cm: 'centimetres',\n  km: 'kilometres',\n}\nmodule.exports = {\n  prefixes: prefixes,\n  suffixes: suffixes,\n}\n","const toString = require('./_toString')\nconst toText = require('./toText')\nconst numOrdinal = require('./toOrdinal/numOrdinal')\nconst textOrdinal = require('./toOrdinal/textOrdinal')\nconst symbols = require('./_symbols')\nconst prefixes = symbols.prefixes\nconst suffixes = symbols.suffixes\n\nconst isCurrency = {\n  usd: true,\n  eur: true,\n  jpy: true,\n  gbp: true,\n  cad: true,\n  aud: true,\n  chf: true,\n  cny: true,\n  hkd: true,\n  nzd: true,\n  kr: true,\n  rub: true,\n}\n// convert $ to 'dollars', etc\nconst prefixToText = function (obj) {\n  // turn 5% to 'five percent'\n  if (prefixes.hasOwnProperty(obj.prefix)) {\n    obj.suffix += prefixes[obj.prefix]\n    obj.prefix = ''\n  }\n  //turn 5km to 'five kilometres'\n  if (suffixes.hasOwnProperty(obj.suffix)) {\n    obj.suffix = suffixes[obj.suffix]\n  }\n  //uppercase lost case for 'USD', etc\n  if (isCurrency.hasOwnProperty(obj.suffix)) {\n    obj.suffix = obj.suffix.toUpperCase()\n  }\n  // add a space, if it exists\n  if (obj.suffix) {\n    obj.suffix = ' ' + obj.suffix\n  }\n  return obj\n}\n\n//business-logic for converting a cardinal-number to other forms\nconst makeNumber = function (obj, isText, isOrdinal) {\n  let num = String(obj.num)\n  if (isText) {\n    obj = prefixToText(obj)\n    if (isOrdinal) {\n      //ordinal-text\n      num = textOrdinal(num)\n      return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n    }\n    //cardinal-text\n    num = toText(num)\n    return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n  }\n  //ordinal-number\n  if (isOrdinal) {\n    num = numOrdinal(num)\n    // support '5th percent'\n    obj = prefixToText(obj)\n    return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n  }\n  // support comma format\n  if (obj.hasComma === true) {\n    num = obj.num.toLocaleString()\n  }\n  // cardinal-number\n  num = toString(num) // support very large numbers\n  return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n}\nmodule.exports = makeNumber\n","const parseNumber = require('./parse')\nconst agreeUnits = require('./_agreeUnits')\nconst makeNumber = require('./convert/makeNumber')\nconst toNumber = require('./convert/toNumber')\n\nlet methods = {\n  /** overloaded json method with additional number information */\n  json: function (options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach((doc) => {\n      let json = doc.json(options)[0]\n      let obj = parseNumber(doc)\n      json.prefix = obj.prefix\n      json.number = obj.num\n      json.suffix = obj.suffix\n      json.cardinal = makeNumber(obj, false, false)\n      json.ordinal = makeNumber(obj, false, true)\n      json.textCardinal = makeNumber(obj, true, false)\n      json.textOrdinal = makeNumber(obj, true, true)\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n]\n    }\n    return res\n  },\n  /** two of what? */\n  units: function () {\n    let m = this.lookAhead('(#Unit|#Noun)+')\n    m = m.splitAfter('@hasComma').first()\n    m = m.not('#Pronoun')\n    return m.first()\n  },\n  /** return only ordinal numbers */\n  isOrdinal: function () {\n    return this.if('#Ordinal')\n  },\n  /** return only cardinal numbers*/\n  isCardinal: function () {\n    return this.if('#Cardinal')\n  },\n  /** convert to numeric form like '8' or '8th' */\n  toNumber: function () {\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, false, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n      val.tag('NumericValue')\n    })\n    return this\n  },\n  /** add commas, or nicer formatting for numbers */\n  toLocaleString: function () {\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      obj.num = obj.num.toLocaleString()\n      let str = makeNumber(obj, false, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n    })\n    return this\n  },\n  /** convert to text form - like 'eight' or 'eigth'*/\n  toText: function () {\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, true, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n      val.tag('TextValue')\n    })\n    return this\n  },\n  /** convert to cardinal form, like 'eight', or '8' */\n  toCardinal: function (agree) {\n    let m = this.if('#Ordinal')\n    m.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), false)\n      // a hack for number-ranges\n      if (val.has('#NumberRange')) {\n        let t = val.termList()[0]\n        if (t.text && t.post === '') {\n          t.post = ' '\n        }\n      }\n      // change the number text\n      val.replaceWith(str, true)\n      val.tag('Cardinal')\n      // turn unit into plural -> 'seven beers'\n      agreeUnits(agree, val, obj)\n    })\n    return this\n  },\n  /** convert to ordinal form, like 'eighth', or '8th' */\n  toOrdinal: function () {\n    let m = this.if('#Cardinal')\n    m.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), true)\n      // a hack for number-ranges\n      if (val.has('#NumberRange')) {\n        let t = val.termList()[0]\n        if (t.text && t.post === '') {\n          t.post = ' '\n        }\n      }\n      // change the number text\n      val.replaceWith(str, true)\n      val.tag('Ordinal')\n      // turn unit into singular -> 'seventh beer'\n      let unit = this.lookAhead('^#Plural')\n      if (unit.found) {\n        unit.nouns().toSingular()\n      }\n    })\n    return this\n  },\n  /** return only numbers that are == n */\n  isEqual: function (n) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num === n\n    })\n  },\n  /** return only numbers that are > n*/\n  greaterThan: function (n) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num > n\n    })\n  },\n  /** return only numbers that are < n*/\n  lessThan: function (n) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num < n\n    })\n  },\n  /** return only numbers > min and < max */\n  between: function (min, max) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num > min && num < max\n    })\n  },\n  /** set these number to n */\n  set: function (n, agree) {\n    if (n === undefined) {\n      return this // don't bother\n    }\n    if (typeof n === 'string') {\n      n = toNumber(n)\n    }\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      obj.num = n\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), val.has('#Ordinal'))\n      val = val.not('#Currency')\n      val.replaceWith(str, true)\n      // handle plural/singular unit\n      agreeUnits(agree, val, obj)\n    })\n    return this\n  },\n  add: function (n, agree) {\n    if (!n) {\n      return this // don't bother\n    }\n    if (typeof n === 'string') {\n      n = toNumber(n)\n    }\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n\n      if (obj.num === null) {\n        return\n      }\n      obj.num += n\n      let str = makeNumber(obj, val.has('#TextValue'), val.has('#Ordinal'))\n      val = val.not('#Currency')\n      val.replaceWith(str, true)\n      // handle plural/singular unit\n      agreeUnits(agree, val, obj)\n    })\n    return this\n  },\n  /** decrease each number by n*/\n  subtract: function (n, agree) {\n    return this.add(n * -1, agree)\n  },\n  /** increase each number by 1 */\n  increment: function (agree) {\n    this.add(1, agree)\n    return this\n  },\n  /** decrease each number by 1 */\n  decrement: function (agree) {\n    this.add(-1, agree)\n    return this\n  },\n  /** return things like CCXX*/\n  romanNumerals: function (n) {\n    let m = this.match('#RomanNumeral').numbers()\n    if (typeof n === 'number') {\n      m = m.get(n)\n    }\n    return m\n  },\n  /** split-apart suffix and number */\n  normalize: function () {\n    const keep = {\n      '%': true,\n    }\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num !== null && obj.suffix && keep[obj.suffix] !== true) {\n        let prefix = obj.prefix || ''\n        val = val.replaceWith(prefix + obj.num + ' ' + obj.suffix)\n        return\n      }\n    })\n    return this\n  },\n  /** retrieve the parsed number */\n  get: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      arr.push(parseNumber(doc).num)\n    })\n    if (n !== undefined) {\n      return arr[n]\n    }\n    return arr\n  },\n}\n// aliases\nmethods.toNice = methods.toLocaleString\nmethods.isBetween = methods.between\nmethods.minus = methods.subtract\nmethods.plus = methods.add\nmethods.equals = methods.isEqual\n\nmodule.exports = methods\n","//from wikipedia's {{infobox currency}}, Dec 2020\nmodule.exports = [\n  {\n    dem: 'american',\n    name: 'dollar',\n    iso: 'usd',\n    sub: 'cent',\n    sym: ['$', 'US$', 'U$'],\n  },\n  { name: 'euro', iso: 'eur', sub: 'cent', sym: ['€'] },\n  {\n    dem: 'british',\n    name: 'pound',\n    iso: 'gbp',\n    sub: 'penny',\n    alias: { sterling: true },\n    sym: ['£'],\n  },\n  {\n    name: 'renminbi',\n    iso: 'cny',\n    sub: 'yuán',\n    plural: 'yuán',\n    alias: { yuan: true },\n    sym: ['元'], //'¥'\n  },\n  {\n    dem: 'japanese',\n    name: 'yen',\n    iso: 'jpy',\n    sub: 'sen',\n    sym: ['¥', '円', '圓'],\n  },\n\n  // kr\n  {\n    dem: 'swedish',\n    name: 'krona',\n    iso: 'sek',\n    sub: 'öre',\n    alias: { ore: true, kronor: true },\n    sym: ['kr'],\n  },\n  {\n    dem: 'estonian',\n    name: 'kroon',\n    iso: 'eek',\n    sub: 'sent',\n    sym: ['kr'],\n  },\n  {\n    dem: 'norwegian',\n    name: 'krone',\n    iso: 'nok',\n    sub: 'øre',\n    sym: ['kr'],\n  },\n  { dem: 'icelandic', name: 'króna', iso: 'isk', sym: ['kr'] },\n  { dem: 'danish', name: 'krone', iso: 'dkk', sub: 'øre', sym: ['kr.'] },\n  // {\n  //   dem: 'scandinavian',\n  //   name: 'Monetary Union',\n  //   sub: 'øre',\n  //   sym: ['kr.'],\n  // },\n\n  // 'k'\n  {\n    dem: 'zambian',\n    name: 'kwacha',\n    iso: 'zmw',\n    sub: 'ngwee',\n    sym: ['K'],\n  },\n  {\n    dem: 'malawian',\n    name: 'kwacha',\n    iso: 'mwk',\n    sub: 'tambala',\n    sym: ['K'],\n  },\n\n  // misc\n\n  {\n    dem: 'greek',\n    name: 'drachma',\n    iso: 'grd',\n    sub: 'leptοn',\n    sym: ['Δρχ.', 'Δρ.', '₯'],\n  },\n  {\n    dem: 'eastern caribbean',\n    name: 'dollar',\n    iso: 'xcd',\n    sub: 'cent',\n    sym: ['$'],\n  },\n  {\n    dem: 'finnish',\n    name: 'markka',\n    iso: 'fim',\n    sub: 'penni',\n    sym: ['mk'],\n  },\n\n  { dem: 'polish', name: 'złoty', iso: 'pln', sub: 'grosz', sym: ['zł'] },\n  {\n    dem: 'slovenian',\n    name: 'tolar',\n    iso: 'sit',\n    sub: 'stotin',\n    sym: [],\n  },\n\n  {\n    dem: 'australian',\n    name: 'dollar',\n    iso: 'aud',\n    sub: 'cent',\n    sym: ['$', 'A$', 'AU$'],\n  },\n  {\n    dem: 'deutsche',\n    name: 'mark',\n    iso: 'dem',\n    sub: 'pfennig',\n    sym: ['DM'],\n  },\n  { dem: 'thai', name: 'baht', iso: 'thb', sub: 'satang', sym: ['฿'] },\n  {\n    dem: 'canadian',\n    name: 'dollar',\n    iso: 'cad',\n    sub: 'cent',\n    sym: ['$', 'Can$', 'C$', 'CA$', 'CAD'],\n  },\n  {\n    dem: 'mexican',\n    name: 'peso',\n    iso: 'mxn',\n    sub: 'centavo',\n    sym: ['$', 'Mex$'],\n  },\n  {\n    dem: 'spanish',\n    name: 'peseta',\n    iso: 'esp',\n    sub: 'céntimo',\n    sym: ['Pta'],\n  },\n  {\n    dem: 'new zealand',\n    name: 'dollar',\n    iso: 'nzd',\n    sub: 'cent',\n    sym: ['$', 'NZ$'],\n  },\n  {\n    dem: 'chilean',\n    name: 'peso',\n    iso: 'clp',\n    sub: 'Centavo',\n    sym: ['Cifrão', '$'],\n  },\n  { dem: 'nigerian', name: 'naira', iso: 'ngn', sub: 'kobo', sym: ['₦'] },\n  {\n    dem: 'austrian',\n    name: 'schilling',\n    iso: 'ats',\n    sub: 'groschen',\n    sym: ['S', 'öS'],\n  },\n\n  {\n    dem: 'guatemalan',\n    name: 'quetzal',\n    iso: 'gtq',\n    sub: 'centavo',\n    sym: ['Q'],\n  },\n  {\n    dem: 'philippine',\n    name: 'peso',\n    iso: 'php',\n    sub: 'sentimo',\n    sym: ['₱'],\n  },\n  {\n    dem: 'hungarian',\n    name: 'forint',\n    iso: 'huf',\n    sub: 'fillér',\n    sym: ['Ft'],\n  },\n  {\n    dem: 'russian',\n    name: 'ruble',\n    iso: 'rub',\n    sub: 'kopeyka',\n    sym: ['₽', 'руб', 'р.'],\n  },\n  {\n    dem: 'kuwaiti',\n    name: 'dinar',\n    iso: 'kwd',\n    sub: 'fils',\n    sym: ['د.ك', 'KD'],\n  },\n  {\n    dem: 'israeli',\n    name: 'new shekel',\n    iso: 'ils',\n    sub: 'agora',\n    sym: ['₪'],\n  },\n  {\n    dem: 'latvian',\n    name: 'lats',\n    iso: 'lvl',\n    sub: 'santīms',\n    sym: ['Ls'],\n  },\n  {\n    dem: 'kazakhstani',\n    name: 'tenge',\n    iso: 'kzt',\n    sub: 'tıyn',\n    sym: ['₸'],\n  },\n  { dem: 'iraqi', name: 'dinar', iso: 'iqd', sub: 'fils', sym: ['د.ع'] },\n  {\n    dem: 'bahamian',\n    name: 'dollar',\n    iso: 'bsd',\n    sub: 'cent',\n    sym: ['$', 'B$'],\n  },\n  {\n    dem: 'seychellois',\n    name: 'rupee',\n    iso: 'scr',\n    sub: 'cent',\n    sym: ['SCR', 'SR'],\n  },\n  {\n    dem: 'albanian',\n    name: 'lek',\n    iso: 'all',\n    sub: 'qindarkë',\n    sym: ['L'],\n  },\n  {\n    dem: 'bulgarian',\n    name: 'lev',\n    iso: 'bgn',\n    sub: 'stotinka',\n    sym: ['лв.'],\n  },\n  {\n    dem: 'irish',\n    name: 'pound',\n    iso: 'iep',\n    sym: ['£', 'IR£'],\n  },\n  { name: 'cfp franc', iso: 'xpf', sym: ['f'] },\n  {\n    dem: 'south african',\n    name: 'rand',\n    iso: 'zar',\n    sub: 'cent',\n    sym: ['R'],\n  },\n  {\n    dem: 'south korean',\n    name: 'won',\n    iso: 'krw',\n    sub: 'jeon',\n    plural: 'won',\n    sym: ['₩'],\n  },\n  {\n    dem: 'north korean',\n    name: 'won',\n    iso: 'kpw',\n    sub: 'chon',\n    plural: 'won',\n    sym: ['₩'],\n  },\n\n  {\n    dem: 'portuguese',\n    name: 'escudo',\n    iso: 'pte',\n    sub: 'centavo',\n    sym: [],\n  },\n  {\n    dem: 'ghanaian',\n    name: 'cedi',\n    iso: 'ghs',\n    sub: 'pesewa',\n    sym: ['GH₵'],\n  },\n  {\n    dem: 'hong kong',\n    name: 'dollar',\n    iso: 'hkd',\n    sub: '毫',\n    sym: ['$'],\n  },\n  {\n    dem: 'new taiwan',\n    name: 'dollar',\n    iso: 'twd',\n    sub: 'dime',\n    sym: ['NT$'],\n  },\n\n  {\n    dem: 'east german',\n    name: 'mark',\n    iso: 'ddm',\n    sub: 'pfennig',\n    sym: ['M'],\n  },\n  {\n    dem: 'namibian',\n    name: 'dollar',\n    iso: 'nad',\n    sub: 'cent',\n    sym: ['$'],\n  },\n  {\n    dem: 'malaysian',\n    name: 'ringgit',\n    iso: 'myr',\n    sub: 'sen',\n    sym: ['RM'],\n  },\n  {\n    dem: 'swiss',\n    name: 'franc',\n    iso: 'chf',\n    sym: ['Rp.'],\n  },\n  {\n    dem: 'panamanian',\n    name: 'balboa',\n    iso: 'pab',\n    sub: 'centésimo',\n    sym: ['B/.'],\n  },\n  {\n    dem: 'indonesian',\n    name: 'rupiah',\n    iso: 'idr',\n    sub: 'sen',\n    sym: ['Rp'],\n  },\n  {\n    dem: 'brunei',\n    name: 'dollar',\n    iso: 'bnd',\n    sub: 'sen',\n    sym: ['$', 'B$'],\n  },\n  {\n    dem: 'venezuelan',\n    name: 'bolívar',\n    iso: 'vef',\n    sub: 'céntimo',\n    sym: ['Bs.F', 'Bs.'],\n  },\n  {\n    dem: 'macedonian',\n    name: 'denar',\n    iso: 'mkd',\n    sub: 'deni',\n    sym: ['den'],\n  },\n  {\n    dem: 'mauritanian',\n    name: 'ouguiya',\n    iso: 'mru',\n    sub: 'khoums',\n    sym: ['UM'],\n  },\n  {\n    dem: 'argentine',\n    name: 'peso',\n    iso: 'ars',\n    sub: 'centavo',\n    sym: ['$'],\n  },\n  {\n    dem: 'libyan',\n    name: 'dinar',\n    iso: 'lyd',\n    sub: 'dirham',\n    sym: ['LD', 'ل.د'],\n  },\n  {\n    dem: 'jordanian',\n    name: 'dinar',\n    iso: 'jod',\n    sub: 'dirham',\n    sym: ['د.أ'],\n  },\n  {\n    dem: 'french',\n    name: 'franc',\n    iso: 'frf',\n    sub: 'centime',\n    sym: ['F', 'Fr', 'FF', '₣'],\n  },\n  {\n    dem: 'syrian',\n    name: 'pound',\n    iso: 'syp',\n    sub: 'piastre',\n    sym: ['LS', '£S'],\n  },\n  { dem: 'belize', name: 'dollar', iso: 'bzd', sub: 'cent', sym: ['$'] },\n  {\n    dem: 'saudi',\n    name: 'riyal',\n    iso: 'sar',\n    sub: 'halalah',\n    sym: ['SAR', 'ر.س', ' ﷼'],\n  },\n  {\n    dem: 'surinamese',\n    name: 'dollar',\n    iso: 'srd',\n    sub: 'cent',\n    sym: ['$'],\n  },\n  {\n    dem: 'singapore',\n    name: 'dollar',\n    iso: 'sgd',\n    sub: 'cent',\n    sym: ['S$', '$'],\n  },\n  {\n    dem: 'nepalese',\n    name: 'rupee',\n    iso: 'npr',\n    sub: 'Paisa',\n    sym: ['रु ₨', 'Re'],\n  },\n  {\n    dem: 'macanese',\n    name: 'pataca',\n    iso: 'mop',\n    sub: 'ho',\n    sym: ['MOP$'],\n  },\n  {\n    dem: 'nicaraguan',\n    name: 'córdoba',\n    iso: 'nio',\n    sub: 'centavo',\n    sym: ['C$'],\n  },\n  {\n    dem: 'bangladeshi',\n    name: 'taka',\n    iso: 'bdt',\n    sub: 'poysha',\n    sym: ['৳'],\n  },\n  {\n    dem: 'indian',\n    name: 'rupee',\n    iso: 'inr',\n    sub: 'paisa',\n    sym: ['₹'],\n  },\n  {\n    dem: 'maldivian',\n    name: 'rufiyaa',\n    iso: 'mvr',\n    sub: 'laari',\n    sym: ['Rf', 'MRf', 'MVR', '.ރ '],\n  },\n  {\n    dem: 'sri lankan',\n    name: 'rupee',\n    iso: 'lkr',\n    sub: 'Cents',\n    sym: ['Rs', 'රු', 'ரூ'],\n  },\n  {\n    dem: 'bhutanese',\n    name: 'ngultrum',\n    iso: 'btn',\n    sub: 'chhertum',\n    sym: ['Nu.'],\n  },\n  {\n    dem: 'turkish',\n    name: 'lira',\n    iso: 'try',\n    sub: 'new kuruş',\n    sym: ['YTL'],\n  },\n  {\n    dem: 'serbian',\n    name: 'dinar',\n    iso: 'rsd',\n    sub: 'para',\n    sym: ['din', 'дин'],\n  },\n  {\n    dem: 'bosnia and herzegovina',\n    name: 'convertible mark',\n    iso: 'bam',\n    sub: 'Fening/Pfenig',\n    sym: ['KM'],\n  },\n  { dem: 'botswana', name: 'pula', iso: 'bwp', sub: 'thebe', sym: ['p'] },\n  {\n    dem: 'swazi',\n    name: 'lilangeni',\n    iso: 'szl',\n    sub: 'cent',\n    sym: ['L', 'E'],\n  },\n  {\n    dem: 'lithuanian',\n    name: 'litas',\n    iso: 'ltl',\n    sub: 'centas',\n    sym: ['Lt', 'ct'],\n  },\n  {\n    dem: 'mauritian',\n    name: 'rupee',\n    iso: 'mur',\n    sub: 'cent',\n    sym: ['₨'],\n  },\n  {\n    dem: 'pakistani',\n    name: 'rupee',\n    iso: 'pkr',\n    sub: 'Paisa',\n    sym: ['₨'],\n  },\n  {\n    dem: 'maltese',\n    name: 'lira',\n    iso: 'mtl',\n    sub: 'cent',\n    sym: ['₤', 'Lm'],\n  },\n  { dem: 'cypriot', name: 'pound', iso: 'cyp', sub: 'cent', sym: ['£'] },\n  { dem: 'moldovan', name: 'leu', iso: 'mdl', sub: 'ban', sym: ['l'] },\n  { dem: 'croatian', name: 'kuna', iso: 'hrk', sub: 'lipa', sym: ['kn'] },\n  {\n    dem: 'afghan',\n    name: 'afghani',\n    iso: 'afn',\n    sub: 'pul',\n    sym: ['؋', 'Af', 'Afs'],\n  },\n  {\n    dem: 'ecuadorian',\n    name: 'sucre',\n    iso: 'ecs',\n    sub: 'centavo',\n    sym: ['S/.'],\n  },\n  {\n    dem: 'sierra leonean',\n    name: 'leone',\n    iso: 'sll',\n    sub: 'cent',\n    sym: ['Le'],\n  },\n  // {\n  //\n  //   name: 'European Currency Unit',\n  //   iso: 'xeu',\n  //   sym: ['₠'],\n  // },\n  // {\n  //\n  //   name: 'Special drawing rights',\n  //   iso: 'xdr',\n  //   sym: ['SDR'],\n  // },\n  // {\n  //\n  //   name: 'Unidad de Valor Constante',\n  //   iso: 'ecv',\n  // },\n]\n","const currencies = require('../../data/currencies')\nconst parseNumber = require('../numbers/parse')\n// aggregate currency symbols for easy lookup\nconst symbols = {}\ncurrencies.forEach((o) => {\n  o.sym.forEach((str) => {\n    symbols[str] = symbols[str] || o.iso\n  })\n  symbols[o.iso] = symbols[o.iso] || o.iso\n})\n\n// parse 'australian dollars'\nconst getNamedCurrency = function (doc) {\n  let m = doc.match('#Currency+')\n  m.nouns().toSingular() // 'dollars'➔'dollar'\n  let str = m.text('reduced')\n  return currencies.find((o) => {\n    // 'mexcan peso'\n    if (str === `${o.dem} ${o.name}`) {\n      return o\n    }\n    // 'CAD'\n    if (str === o.iso) {\n      return o\n    }\n    // 'cent'\n    if (str === o.sub) {\n      return o\n    }\n    // 'peso'\n    if (str === o.name) {\n      return o\n    }\n    // any other alt names\n    if (o.alias && o.alias[str] === true) {\n      return o\n    }\n    return false\n  })\n}\n\n// turn '£' into GBP\nconst getBySymbol = function (obj) {\n  // do suffix first, for '$50CAD'\n  if (obj.suffix && symbols.hasOwnProperty(obj.suffix)) {\n    return currencies.find((o) => o.iso === symbols[obj.suffix])\n  }\n  // parse prefix for '£50'\n  if (obj.prefix && symbols.hasOwnProperty(obj.prefix)) {\n    return currencies.find((o) => o.iso === symbols[obj.prefix])\n  }\n  return null\n}\n\nconst parseMoney = function (doc) {\n  let res = parseNumber(doc)\n  let found = getBySymbol(res) || getNamedCurrency(doc) || {}\n  let sym = ''\n  if (found && found.sym) {\n    sym = found.sym[0]\n  }\n  return {\n    num: res.num,\n    iso: found.iso,\n    demonym: found.dem,\n    currency: found.name,\n    plural: found.plural,\n    symbol: sym,\n  }\n}\nmodule.exports = parseMoney\n","const makeNumber = require('../numbers/convert/makeNumber')\nconst parseMoney = require('./parse')\n\nconst titleCase = function (str = '') {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  })\n}\n\nconst moneyMethods = {\n  /** which currency is this money in? */\n  currency: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      let found = parseMoney(doc)\n      if (found) {\n        arr.push(found)\n      }\n    })\n    if (typeof n === 'number') {\n      return arr[n]\n    }\n    return arr\n  },\n\n  /** overloaded json method with additional number information */\n  json: function (options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach((doc) => {\n      let json = doc.json(options)[0]\n      let obj = parseMoney(doc)\n      json.number = obj.num\n      if (obj.iso) {\n        json.iso = obj.iso.toUpperCase()\n        json.symbol = obj.symbol\n        json.currency = titleCase(obj.demonym) + ' ' + titleCase(obj.currency)\n      }\n      // 'thirty pounds'\n      json.textFmt = makeNumber(obj, true, false)\n      if (obj.currency) {\n        let str = obj.currency\n        if (obj.num !== 1) {\n          str = obj.plural || str + 's'\n        }\n        json.textFmt += ' ' + str\n      }\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n] || {}\n    }\n    return res\n  },\n}\n\nmodule.exports = moneyMethods\n","const endS = /s$/\n\nconst slashForm = function (m) {\n  let str = m.text('reduced')\n  let found = str.match(/^([-+]?[0-9]+)\\/([-+]?[0-9]+)(st|nd|rd|th)?s?$/)\n  if (found && found[1] && found[0]) {\n    return {\n      numerator: Number(found[1]),\n      denominator: Number(found[2]),\n    }\n  }\n  return null\n}\n\n// parse '4 out of 4'\nconst textForm1 = function (m) {\n  let found = m.match('[<num>#Value+] out of every? [<den>#Value+]')\n  if (found.found !== true) {\n    return null\n  }\n  let { num, den } = found.groups()\n  num = num.numbers().get(0)\n  den = den.numbers().get(0)\n  if (typeof num === 'number' && typeof den === 'number') {\n    return {\n      numerator: num,\n      denominator: den,\n    }\n  }\n  return null\n}\n\n// parse 'a third'\nconst textForm2 = function (m) {\n  let found = m.match('[<num>(#Cardinal|a)+] [<den>#Fraction+]')\n  if (found.found !== true) {\n    return null\n  }\n  let { num, den } = found.groups()\n  // quick-support for 'a third'\n  if (num.has('a')) {\n    num = 1\n  } else {\n    num = num.numbers().get(0)\n  }\n  // turn 'thirds' into third\n  let str = den.text('reduced')\n  if (endS.test(str)) {\n    str = str.replace(endS, '')\n    den.replaceWith(str)\n  }\n  // support 'one half' as '1/2'\n  if (den.has('half')) {\n    den = 2\n  } else {\n    den = den.numbers().get(0)\n  }\n  if (typeof num === 'number' && typeof den === 'number') {\n    return {\n      numerator: num,\n      denominator: den,\n    }\n  }\n  return null\n}\n\nconst parseFraction = function (m) {\n  return slashForm(m) || textForm1(m) || textForm2(m) || null\n}\nmodule.exports = parseFraction\n","const parse = require('./parse')\nconst parseNumber = require('../numbers/parse')\nconst makeNumber = require('../numbers/convert/makeNumber')\n\nconst methods = {\n  toNumber() {\n    this.forEach((val) => {\n      let obj = parseNumber(val, val.has('#Fraction'))\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, false)\n      val.replaceWith(str, true)\n      val.tag('NumericValue')\n      val.unTag('Fraction')\n    })\n    return this\n  },\n  /** overloaded json method with additional number information */\n  json: function (options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach((m) => {\n      let json = m.json(options)[0]\n      let found = parse(m) || {}\n      let obj = parseNumber(m, m.has('#Fraction'))\n      json.numerator = found.numerator\n      json.denominator = found.denominator\n      json.number = obj.num\n      json.cardinal = makeNumber(obj, false, false)\n      json.textCardinal = makeNumber(obj, true, false)\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n] || {}\n    }\n    return res\n  },\n\n  /** change 'four out of 10' to 4/10 */\n  normalize: function () {\n    this.forEach((m) => {\n      let found = parse(m)\n      if (found && typeof found.numerator === 'number' && typeof found.denominator === 'number') {\n        let str = `${found.numerator}/${found.denominator}`\n        this.replace(m, str)\n      }\n    })\n    return this\n  },\n\n  get: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      arr.push(parseNumber(doc, doc.has('#Fraction')).num)\n    })\n    if (n !== undefined) {\n      return arr[n]\n    }\n    return arr\n  },\n}\nmodule.exports = methods\n","const here = 'number-tag'\nconst multiples =\n  '(hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion)'\n\n//support 'two thirds'\n// (do this conservatively)\nlet ordinals = [\n  'half',\n  'third',\n  'fourth',\n  'quarter',\n  'fifth',\n  'sixth',\n  'seventh',\n  'eighth',\n  'ninth',\n  'tenth',\n  'hundredth',\n  'thousandth',\n  'millionth',\n]\n// add plural forms\nlet len = ordinals.length\nfor (let i = 0; i < len; i += 1) {\n  ordinals.push(ordinals[i] + 's')\n}\nordinals = `(${ordinals.join('|')})`\n\n// improved tagging for numbers\nconst tagger = function (doc) {\n  doc.match('a? (#Ordinal|half|quarter|#Fraction)').tag('Fraction', here)\n  doc.match('#Value+ and #Value+ (#Ordinal|half|quarter|#Fraction)').tag('Fraction', here)\n  doc.match('#Value+ (#Ordinal|half|quarter|#Fraction)').tag('Fraction', here)\n\n  doc.match('#Cardinal+? (second|seconds)').unTag('Fraction', here)\n  doc.match('#Ordinal #Ordinal+').unTag('Fraction')\n  doc.match('#Fraction && #Ordinal').unTag('Ordinal')\n\n  doc.match('[#Cardinal+? (second|seconds)] of (a|an)', 0).tag('Fraction', here)\n  doc.match(multiples).tag('#Multiple', here)\n\n  //  in the 400s\n  doc.match('the [/[0-9]+s$/]').tag('#Plural', here)\n  //half a million\n  doc.match('half a? #Value?').tag('Value', 'half-a-value') //(quarter not ready)\n  //five and a half\n  doc.match('#Value and a (half|quarter)').tag('Value', 'value-and-a-half')\n  //one hundred and seven dollars\n  doc.match('#Money and #Money #Currency?').tag('Money', 'money-and-money')\n  // $5.032 is invalid money\n  doc\n    .match('#Money')\n    .not('#TextValue')\n    .match('/\\\\.[0-9]{3}$/')\n    .unTag('#Money', 'three-decimal money')\n  // cleanup currency false-positives\n  doc.ifNo('#Value').match('#Currency #Verb').unTag('Currency', 'no-currency')\n  // 6 dollars and 5 cents\n  doc.match('#Value #Currency [and] #Value (cents|ore|centavos|sens)', 0).tag('Money', here)\n  // maybe currencies\n  let m = doc.match('[<num>#Value] [<currency>(mark|rand|won|rub|ore)]')\n  m.group('num').tag('Money', here)\n  m.group('currency').tag('Currency', here)\n\n  // fraction - '3 out of 5'\n  doc.match('#Cardinal+ out of every? #Cardinal').tag('Fraction', here)\n  // fraction - 'a third of a slice'\n  // m = doc.match(`[(#Cardinal|a) ${ordinals}] of (a|an|the)`, 0).tag('Fraction', here)\n  // tag 'thirds' as a ordinal\n  m.match('.$').tag('Ordinal', 'plural-ordinal')\n}\nmodule.exports = tagger\n","module.exports = {\n  Fraction: {\n    isA: ['Value'],\n  },\n  Multiple: {\n    isA: 'Value',\n  },\n}\n","const currencies = require('./currencies')\n\nconst ambig = {\n  mark: true,\n  sucre: true,\n  leone: true,\n  afghani: true,\n  rand: true,\n  try: true,\n  mop: true,\n  won: true,\n  all: true,\n  rub: true,\n  eek: true,\n  sit: true,\n  bam: true,\n  npr: true,\n  leu: true,\n}\n\nlet lex = {\n  kronor: 'Currency',\n}\ncurrencies.forEach((o) => {\n  if (o.iso && !ambig[o.iso]) {\n    lex[o.iso] = ['Acronym', 'Currency']\n  }\n  let name = o.name\n  if (name && !ambig[name]) {\n    lex[name] = 'Currency'\n    lex[name + 's'] = 'Currency'\n  }\n  if (o.dem) {\n    let dem = o.dem\n    lex[`${dem} ${name}`] = 'Currency'\n    lex[`${dem} ${name}s`] = 'Currency'\n  }\n})\n\nmodule.exports = lex\n","const findNumbers = require('./numbers/find')\nconst numberMethods = require('./numbers/methods')\nconst moneyMethods = require('./money/methods')\nconst fractionMethods = require('./fractions/methods')\nconst tagger = require('./tagger')\nconst tags = require('./tags')\nconst lexicon = require('../data/lexicon')\n\n/** adds .numbers() method */\nconst plugin = function (Doc, world) {\n  // add money words to our lexicon\n  world.addWords(lexicon)\n  // add tags to our tagset\n  world.addTags(tags)\n  // additional tagging before running the number-parser\n  world.postProcess(tagger)\n\n  /** a list of number values, and their units */\n  class Numbers extends Doc {}\n  Object.assign(Numbers.prototype, numberMethods)\n\n  /** a number and a currency */\n  class Money extends Numbers {}\n  Object.assign(Money.prototype, moneyMethods)\n\n  class Fraction extends Numbers {}\n  Object.assign(Fraction.prototype, fractionMethods)\n\n  const docMethods = {\n    /** find all numbers and values */\n    numbers: function (n) {\n      let m = findNumbers(this, n)\n      return new Numbers(m.list, this, this.world)\n    },\n\n    /** return '4%' or 'four percent' etc*/\n    percentages: function (n) {\n      let m = this.match('#Percent+')\n      m = m.concat(this.match('[#Cardinal] percent', 0))\n      if (typeof n === 'number') {\n        m = m.eq(n)\n      }\n      return new Numbers(m.list, this, this.world)\n    },\n\n    /** return '3 out of 5' or '3/5' etc**/\n    fractions: function (n) {\n      let m = this.match('#Fraction+')\n      this.match('and #Fraction+').tag('Fraction')\n      this.match('#Fraction+').unTag('Ordinal')\n      if (typeof n === 'number') {\n        m = m.eq(n)\n      }\n      return new Fraction(m.list, this, this.world)\n    },\n\n    /** number + currency pair */\n    money: function () {\n      let m = this.splitOn('(#Money|#Currency)+')\n      m = m.if('#Money').if('#Value')\n      return new Money(m.list, this, this.world)\n    },\n  }\n  // aliases\n  docMethods.values = docMethods.numbers\n  docMethods.percents = docMethods.percentages\n\n  Object.assign(Doc.prototype, docMethods)\n\n  return Doc\n}\nmodule.exports = plugin\n"],"names":["tens","teens","findNumbers","doc","n","match","has","splitAfter","splitOn","double","found","terms","forEach","d","splitBefore","get","findModifiers","str","mults","reg","mult","i","length","test","amount","replace","ones","zeroth","first","second","third","fourth","fifth","sixth","seventh","eighth","ninth","zero","one","two","three","four","five","six","seven","eight","nine","tenth","eleventh","twelfth","thirteenth","fourteenth","fifteenth","sixteenth","seventeenth","eighteenth","nineteenth","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twentieth","thirtieth","fortieth","fourtieth","fiftieth","sixtieth","seventieth","eightieth","ninetieth","twenty","thirty","forty","fourty","fifty","sixty","seventy","eighty","ninety","multiples","hundredth","thousandth","millionth","billionth","trillionth","quadrillionth","quintillionth","sextillionth","septillionth","hundred","thousand","million","billion","trillion","quadrillion","quintillion","sextillion","septillion","grand","fractions","a","half","quarter","isValid","w","words","hasOwnProperty","parseDecimals","arr","parseFloat","parseNumeric","parseFractions","multiplier","slice","improperFraction","casualForms","isFractional","term","toPrecisionNumber","num","Number","toPrecision","section_sum","obj","Object","keys","reduce","sum","k","parse","isFraction","modifier","last_mult","isNegative","split","charAt","substr","fm","denom","parseFraction","subterms","fractional","join","prev","undefined","w2","p","suffix","prefix","parseNumber","text","hasComma","res","toNumber","agreeUnits","agree","val","unit","lookAhead","nouns","toSingular","toPlural","numToString","String","toFixed","indexOf","b","Array","tens_mapping","ones_mapping","sequence","breakdown_magnitudes","working","have","howmany","Math","floor","push","count","breakdown_hundred","handle_decimal","names","toString","decimal","decimals","to_text","abs","units","unit_name","concat","filter","s","numOrdinal","mapping","last","irregulars","textOrdinal","textValue","prefixes","$","suffixes","cm","km","symbols","isCurrency","usd","eur","jpy","gbp","cad","aud","chf","cny","hkd","nzd","kr","rub","prefixToText","toUpperCase","makeNumber","isText","isOrdinal","toText","toLocaleString","methods","json","options","normal","trim","number","cardinal","ordinal","textCardinal","m","not","isCardinal","replaceWith","tag","toCardinal","t","termList","post","toOrdinal","isEqual","greaterThan","lessThan","between","min","max","set","add","subtract","increment","decrement","romanNumerals","numbers","normalize","keep","toNice","isBetween","minus","plus","equals","dem","name","iso","sub","sym","alias","sterling","plural","yuan","ore","kronor","currencies","o","getNamedCurrency","find","getBySymbol","parseMoney","demonym","currency","symbol","titleCase","txt","toLowerCase","moneyMethods","textFmt","endS","slashForm","numerator","denominator","textForm1","groups","den","textForm2","unTag","here","ordinals","len","tagger","ifNo","group","Fraction","isA","Multiple","ambig","mark","sucre","leone","afghani","rand","mop","won","all","eek","sit","bam","npr","leu","lex","plugin","Doc","world","addWords","lexicon","addTags","tags","postProcess","Numbers","assign","prototype","numberMethods","Money","fractionMethods","docMethods","list","percentages","eq","money","values","percents"],"mappings":"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"}