{"version":3,"file":"compromise-strict.js","sources":["../src/constants.js","../src/parser.js","../src/pikevm.js","../src/regex.js","../src/index.js"],"sourcesContent":["exports.NOOP = Symbol(\"NOOP\") // basically continue\nexports.MATCH_ANY = Symbol(\"MATCH_ANY\")\nexports.MATCH_WORD = Symbol(\"MATCH_WORD\")\nexports.MATCH_TAG = Symbol(\"MATCH_TAG\")\nexports.MATCH_METHOD = Symbol(\"MATCH_METHOD\")\nexports.MATCH_END = Symbol(\"MATCH_END\")\nexports.JMP = Symbol(\"JMP\")\nexports.SPLIT = Symbol(\"SPLIT\")\nexports.GLOBAL_SAVE = Symbol(\"GLOBAL_SAVE\") // Set global save value, if true saves results.\nexports.MATCH = Symbol(\"MATCH\")\nexports.OGROUP = Symbol(\"OGROUP\") // open group\nexports.CGROUP = Symbol(\"CGROUP\") // close group\nexports.INCV = Symbol(\"INCV\") // increment a value, set to 0 by default\nexports.JMP_LT = Symbol(\"JMP_LT\") // jmp if a variable is less than value else continue\nexports.SPLIT_LT = Symbol(\"SPLIT_LT\") // split if a variable is less than value else continue\nexports.LOOKAHEAD = Symbol(\"LOOKAHEAD\")\nexports.NEGATIVE_LOOKAHEAD = Symbol(\"NEGATIVE_LOOKAHEAD\")\n","const { EmbeddedActionsParser, Lexer, createToken } = require('chevrotain')\n\nconst {\n  NOOP,\n  MATCH_ANY,\n  MATCH_TAG,\n  MATCH_WORD,\n  MATCH_METHOD,\n  MATCH_END,\n  JMP,\n  SPLIT,\n  GLOBAL_SAVE,\n  MATCH,\n  OGROUP,\n  CGROUP,\n  INCV,\n  JMP_LT,\n  SPLIT_LT,\n  LOOKAHEAD,\n  NEGATIVE_LOOKAHEAD,\n} = require('./constants')\n\nconst StartOf = createToken({ name: 'StartOf', pattern: /\\^/ })\nconst EndOf = createToken({ name: 'EndOf', pattern: /\\$/ })\nconst Tag = createToken({ name: 'Tag', pattern: /#([_-\\w]|\\\\.)+/ })\nconst EscapedWord = createToken({\n  name: 'EscapedWord',\n  pattern: /\\\\[#@]([_-\\w]|\\\\.)+/,\n})\nconst Word = createToken({ name: 'Word', pattern: /([_-\\w]|\\\\.)+/ })\nconst Method = createToken({ name: 'Method', pattern: /@[_-\\w]+/ })\nconst Question = createToken({\n  name: 'Question',\n  pattern: /\\?/,\n  longer_alt: Word,\n})\nconst Exclamation = createToken({\n  name: 'Exclamation',\n  pattern: /!/,\n  longer_alt: Word,\n})\nconst Equals = createToken({ name: 'Equals', pattern: /=/, longer_alt: Word })\nconst Pound = createToken({ name: 'Pound', pattern: /#/, longer_alt: Tag })\nconst Dot = createToken({ name: 'Dot', pattern: /\\./, longer_alt: Word })\nconst Pipe = createToken({ name: 'Pipe', pattern: /\\|/ })\nconst Comma = createToken({ name: 'Comma', pattern: /,/, longer_alt: Word })\nconst Colon = createToken({ name: 'Colon', pattern: /:/, longer_alt: Word })\nconst Plus = createToken({ name: 'Plus', pattern: /\\+/ })\nconst Star = createToken({ name: 'Star', pattern: /\\*/ })\nconst Zero = createToken({ name: 'Zero', pattern: /0/, longer_alt: Word })\nconst PositiveInt = createToken({\n  name: 'PositiveInt',\n  pattern: /[1-9]\\d*/,\n  longer_alt: Word,\n})\nconst LParenthesis = createToken({ name: 'LParenthesis', pattern: /\\(/ })\nconst RParenthesis = createToken({ name: 'RParenthesis', pattern: /\\)/ })\nconst LCurly = createToken({ name: 'LCurly', pattern: /\\{/ })\nconst RCurly = createToken({ name: 'RCurly', pattern: /\\}/ })\nconst NamedGroupBegin = createToken({ name: 'NamedGroupBegin', pattern: /P</ })\nconst NamedGroupEnd = createToken({\n  name: 'NamedGroupEnd',\n  pattern: />/,\n  longer_alt: Word,\n})\nconst WhiteSpace = createToken({\n  name: 'WhiteSpace',\n  pattern: /\\s+/,\n  group: Lexer.SKIPPED,\n})\n\nconst allTokens = [\n  NamedGroupBegin,\n  NamedGroupEnd,\n  WhiteSpace,\n  StartOf,\n  EndOf,\n  Zero,\n  PositiveInt,\n  Dot,\n  EscapedWord,\n  Word,\n  Method,\n  Tag,\n  Exclamation,\n  Equals,\n  Pound,\n  Colon,\n  Question,\n  Plus,\n  Star,\n  Comma,\n  Pipe,\n  LParenthesis,\n  RParenthesis,\n  LCurly,\n  RCurly,\n]\n\n// Notes or something like it, may not be accurate.\n// (a|b)\n// 0. split 1, 3\n// 1. char a\n// 2. jmp 4\n// 3. char b\n// 4. match\n//\n// (a|b|c)\n// 0. split 1, 3, 5\n// 1. char a\n// 2. jmp 7\n// 3. char b\n// 4. jmp 7\n// 5. char c\n// 6. match\n//\n// ((a|b)|c)\n// 0. split 1, 6\n// 1. split 2, 4\n// 2. char a\n// 3. jmp 7\n// 4. char b\n// 5. jmp 7\n// 6. char c\n// 7. match\n//\n// a{2}\n// 0. noop\n// 1. char a\n// 2. incv i 1, def=0\n// 3. jmp_lt i 2 [0]\n//\n// a{2, 3}\n// 0. noop\n// 1. char a\n// 2. incv i 1, def=0\n// 3. jmp_lt 0 i [2]\n// 4. split_lt i 3 [0, 6]\n//\n// a{,3}\n// 0. noop\n// 1. char a\n// 2. incv i 1, def=0\n// 3. split_lt i 3 [0, 5]\n//\n// a{3,}\n// 0. noop\n// 1. char a\n// 2. incv i 1, def=0\n// 3. jmp_lt i 3\n// 4. split [0, 6]\n//\n// a(!b)\n// 0. noop\n// 1. char a\n// 2. nlookahead prog  // negative lookahead is a sub program\n//   1. match b\n//   2. match\n// 2.1. if found stop, else continue at current sp\n//\n\nclass MatchParser extends EmbeddedActionsParser {\n  constructor() {\n    super(allTokens)\n\n    /*\n     * '.'\n     * '^remind #Noun$'\n     * '\\#Noun' -- escaped word containing #\n     * '(remind|#Noun)'\n     * '(remind+|#Noun)'\n     * '(remind|#Noun)+'\n     * '#Noun{2}'\n     * '#Noun?'\n     * '#Noun*'\n     * '(?:remind #Noun)' -- non capturing group\n     * '(?P<name>#Noun)'\n     * '(?P<name>#Noun)+'\n     *\n     * matchStatement ([startOf] valueStatement [endOf])\n     * valueStatement (value [...value])\n     * rangeModifier (LCurly, ((PositiveInt|Zero) [, PositiveInt]) RCurly)\n     * oneOrMore (Plus)\n     * zeroOrMore (Star)\n     * zeroOrOne (Question)\n     * valueModifier (oneOrMore, rangeModifier, zeroOrMore, zeroOrOne)\n     * value (dot, word, escapedWord, tag, Zero, PositiveInt, group)[valueModifier]\n     * namedGroupBegin: token pattern /\\?P</\n     * namedGroupEnd: token pattern />/\n     * namedGroup (namedGroupBegin, Word, namedGroupEnd)\n     * nonCapturingGroup token pattern /\\?:/ -- TODO: figure out how to escape these\n     * negativeGroup token patter /\\?!/\n     * groupModifier [namedGroup|nonCapturingGroup]\n     * group (LParent, [groupModifier], valueStatement|...), RParen)\n     *\n     */\n\n    const $ = this\n    $.RULE('matchStatement', () => {\n      const matches = {\n        startOf: false,\n        prog: [],\n        endOf: false,\n      }\n\n      $.OPTION(() => {\n        $.CONSUME(StartOf)\n        matches.startOf = true\n      })\n\n      // handle ^ startOf\n      if (!matches.startOf) {\n        // .*? at the start when not ^ / startOf, don't save the matched\n        // values.\n        matches.prog.push({ code: GLOBAL_SAVE, value: false })\n        matches.prog.push({ code: SPLIT, locs: [4, 2] })\n        matches.prog.push({ code: MATCH_ANY })\n        matches.prog.push({ code: JMP, loc: 1 })\n        matches.prog.push({ code: GLOBAL_SAVE, value: true })\n      }\n\n      matches.groups = []\n      $.SUBRULE($.valueStatement, { ARGS: [matches.prog, matches.groups] })\n\n      $.OPTION1(() => {\n        $.CONSUME(EndOf)\n        matches.endOf = true\n      })\n\n      // handle $ endOf\n      $.ACTION(() => {\n        if (matches.endOf) {\n          matches.prog.push({ code: MATCH_END })\n        }\n        matches.prog.push({ code: MATCH })\n      })\n\n      return matches\n    })\n\n    $.RULE('valueStatement', (prog = [], groups = [], vars = []) => {\n      const inst = []\n      $.AT_LEAST_ONE({\n        DEF: () => {\n          $.SUBRULE($.value, { ARGS: [prog, groups, vars] })\n        },\n      })\n      return inst\n    })\n\n    $.RULE('value', (prog = [], groups = [], vars = []) => {\n      const split = { code: NOOP } // save split for modifiers\n      prog.push(split)\n      const start = prog.length // save start for split jmp later\n\n      $.OR([\n        {\n          ALT: () => {\n            $.CONSUME(Dot)\n            prog.push({ code: MATCH_ANY })\n          },\n        },\n        {\n          ALT: () => {\n            prog.push({ code: MATCH_WORD, value: $.CONSUME(Word).image })\n          },\n        },\n        {\n          ALT: () => {\n            prog.push({\n              code: MATCH_WORD,\n              value: $.CONSUME(EscapedWord).image.substr(1),\n            })\n          },\n        },\n        {\n          ALT: () => {\n            prog.push({\n              code: MATCH_TAG,\n              value: $.CONSUME(Tag).image.substr(1),\n            })\n          },\n        },\n        {\n          ALT: () => {\n            prog.push({ code: MATCH_WORD, value: $.CONSUME(Zero).image })\n          },\n        },\n        {\n          ALT: () => {\n            prog.push({\n              code: MATCH_WORD,\n              value: $.CONSUME(PositiveInt).image,\n            })\n          },\n        },\n        {\n          ALT: () => {\n            prog.push({\n              code: MATCH_METHOD,\n              value: $.CONSUME(Method).image.substr(1),\n            })\n          },\n        },\n        {\n          ALT: () => {\n            $.SUBRULE($.group, { ARGS: [prog, groups, vars] })\n          },\n        },\n      ])\n\n      $.OPTION(() => {\n        // TODO: could probably allow relative jmps to get rid of noop\n        const { type, greedy, min, max } = $.SUBRULE($.valueModifier)\n        switch (type) {\n          case 'ZERO_OR_ONE':\n            split.code = SPLIT\n            split.locs = [start, prog.length]\n            break\n          case 'ZERO_OR_MORE':\n            prog.push({ code: JMP, loc: start - 1 })\n            split.code = SPLIT\n            split.locs = [start, prog.length]\n            break\n          case 'ONE_OR_MORE':\n            prog.push({ code: SPLIT, locs: [start, prog.length + 1] })\n            if (!greedy) {\n              prog[prog.length - 1].locs.reverse()\n            }\n            break\n          case 'RANGE':\n            const varId = vars.length\n            vars.push(varId)\n            prog.push({ code: INCV, varId }) // increment first\n\n            const minInst = {\n              code: JMP_LT,\n              varId,\n              value: min || 0,\n              loc: start,\n            }\n            let maxInst = null\n            if (min === max) {\n              // a{x}\n              if (min === 0) {\n                // a{0} skip matching, causes token to be ignored\n                split.code = JMP\n                split.loc = prog.length // next instruction\n              } else {\n                // a{x}\n                prog.push(minInst)\n              }\n            } else if ((min || 0) === 0 && max !== null) {\n              // a{,y} a{0,y}\n              split.code = SPLIT\n              split.locs = [start, prog.length + 1]\n\n              maxInst = {\n                code: SPLIT_LT,\n                varId,\n                value: max,\n                locs: [start, prog.length + 1],\n              }\n              prog.push(maxInst)\n            } else if (min !== null && max === null) {\n              // a{x,}\n              prog.push(minInst)\n              maxInst = { code: SPLIT, locs: [start, prog.length + 1] }\n              prog.push(maxInst)\n            } else {\n              // if (min !== null && max !== null) {\n              // a{x,y}\n              prog.push(minInst)\n              maxInst = {\n                code: SPLIT_LT,\n                varId,\n                value: max,\n                locs: [start, prog.length + 1],\n              }\n              prog.push(maxInst)\n            }\n\n            if (!greedy && maxInst && maxInst.locs) {\n              maxInst.locs.reverse() // reverse thread priority for greedy / non-greedy\n            }\n            //{ code: SPLIT, locs: [ ] }\n            //prog.push({ code: SETV_ONCE, id: rid, value: 0 });\n            //prog.push({ code: INCREMENT, id: rid, value: 1 });\n            //prog.push({ code: JMP_IF_GTE, id: rid, value: 0 });\n            break\n        }\n        if (!greedy && split.locs) {\n          split.locs.reverse()\n        }\n      })\n    })\n\n    $.RULE('valueModifier', () => {\n      let result = { type: null, greedy: true }\n      $.OR([\n        {\n          ALT: () => {\n            $.CONSUME(Question)\n            result.type = 'ZERO_OR_ONE'\n          },\n        },\n        {\n          ALT: () => {\n            $.CONSUME(Star)\n            result.type = 'ZERO_OR_MORE'\n          },\n        },\n        {\n          ALT: () => {\n            $.CONSUME(Plus)\n            result.type = 'ONE_OR_MORE'\n          },\n        },\n        {\n          ALT: () => {\n            const { min, max } = $.SUBRULE($.rangeModifier)\n            $.ACTION(() => {\n              result.type = 'RANGE'\n              result.min = min\n              result.max = max\n            })\n          },\n        },\n      ])\n      $.OPTION(() => {\n        $.CONSUME1(Question)\n        $.ACTION(() => {\n          result.greedy = false\n        })\n      })\n      return result\n    })\n\n    $.RULE('rangeModifier', () => {\n      const range = { min: null, max: null }\n      $.CONSUME(LCurly)\n\n      // {x}\n      $.OPTION(() => {\n        $.OR([\n          {\n            ALT: () => {\n              range.min = $.CONSUME(Zero).image\n            },\n          },\n          {\n            ALT: () => {\n              range.min = $.CONSUME(PositiveInt).image\n            },\n          },\n        ])\n      })\n\n      // {x}\n      range.max = range.min\n\n      $.OPTION1(() => {\n        $.CONSUME(Comma)\n        // {x,}\n        range.max = null\n        // {,x} {x,}, {x,y}\n        $.OPTION2(() => {\n          range.max = $.CONSUME1(PositiveInt).image\n        })\n      })\n\n      $.ACTION(() => {\n        if (range.min) {\n          range.min = parseInt(range.min, 10)\n        }\n        if (range.max) {\n          range.max = parseInt(range.max, 10)\n        }\n        const { min, max } = range\n        if (min && max && min > max) {\n          throw new Error(`Range min(${min}) must be greater than max(${max}).`)\n        }\n        if (min === null && max === null) {\n          throw new Error(`Range min or max must be defined.`)\n        }\n      })\n\n      $.CONSUME(RCurly)\n      return range\n    })\n\n    $.RULE('group', (prog = [], groups = [], vars = []) => {\n      let modifiers = {\n        capture: true,\n        name: null,\n        lookahead: false,\n        negative: false,\n      }\n\n      $.CONSUME(LParenthesis)\n\n      $.OPTION(() => {\n        modifiers = $.SUBRULE($.groupModifier)\n      })\n\n      let oProg = null\n      if (modifiers.lookahead) {\n        // part 1, see finish at end\n        modifiers.capture = false\n        oProg = prog\n        prog = []\n      }\n\n      const gId = groups.length\n      if (modifiers.capture) {\n        groups.push(modifiers)\n        prog.push({ code: OGROUP, id: gId, name: modifiers.name })\n      }\n\n      const split = { code: SPLIT, locs: [] }\n      prog.push(split)\n      let jmps = []\n\n      $.AT_LEAST_ONE_SEP({\n        SEP: Pipe,\n        DEF: () => {\n          split.locs.push(prog.length)\n          $.SUBRULE($.valueStatement, { ARGS: [prog, groups, vars] })\n\n          const jmp = { code: JMP, loc: null }\n          jmps.push(jmp)\n          prog.push(jmp)\n        },\n      })\n\n      // make split noop when just one in group\n      if (split.locs.length === 1) {\n        split.code = NOOP\n        delete split.locs\n      }\n\n      // remove last jmp so it continues\n      prog.pop()\n\n      // set jmps to end\n      for (const jmp of jmps) {\n        jmp.loc = prog.length\n      }\n\n      // close the group if necessary as the last step\n      if (modifiers.capture) {\n        prog.push({ code: CGROUP, id: gId, name: modifiers.name })\n      }\n\n      if (modifiers.lookahead) {\n        prog.push({ code: MATCH })\n        oProg.push({\n          code: modifiers.negative ? NEGATIVE_LOOKAHEAD : LOOKAHEAD,\n          prog,\n        })\n      }\n\n      $.CONSUME(RParenthesis)\n    })\n\n    $.RULE('namedGroup', () => {\n      $.CONSUME(Question)\n      $.CONSUME(NamedGroupBegin)\n      const name = $.CONSUME(Word).image\n      $.CONSUME(NamedGroupEnd)\n      return name\n    })\n\n    $.RULE('nonCapturingGroup', () => {\n      $.CONSUME(Question)\n      $.CONSUME(Colon)\n    })\n\n    $.RULE('negativeLookaheadGroup', () => {\n      $.CONSUME(Question)\n      $.CONSUME(Exclamation)\n    })\n\n    $.RULE('positiveLookaheadGroup', () => {\n      $.CONSUME(Question)\n      $.CONSUME(Equals)\n    })\n\n    $.RULE('commentGroup', () => {\n      $.CONSUME(Question)\n      $.CONSUME(Pound)\n    })\n\n    $.RULE('groupModifier', () => {\n      let result = {\n        capture: true,\n        name: null,\n        lookahead: false,\n        negative: false,\n        comment: false,\n      }\n      $.OR([\n        {\n          ALT: () => {\n            $.SUBRULE($.nonCapturingGroup)\n            result.capture = false\n          },\n        },\n        {\n          ALT: () => {\n            result.name = $.SUBRULE($.namedGroup)\n          },\n        },\n        {\n          ALT: () => {\n            $.SUBRULE($.negativeLookaheadGroup)\n            result.capture = false\n            result.lookahead = true\n            result.negative = true\n          },\n        },\n        {\n          ALT: () => {\n            $.SUBRULE($.positiveLookaheadGroup)\n            result.capture = false\n            result.lookahead = true\n            result.negative = false\n          },\n        },\n        /*\n        { ALT: () => {\n          $.SUBRULE($.commentGroup);\n          result.capture = false;\n          result.comment = true;\n        }}\n        */\n      ])\n      return result\n    })\n\n    this.performSelfAnalysis()\n  }\n}\n\nmodule.exports = {\n  allTokens: allTokens,\n  MatchParser: MatchParser,\n}\n","const {\n  NOOP,\n  MATCH_ANY,\n  MATCH_TAG,\n  MATCH_WORD,\n  MATCH_METHOD,\n  MATCH_END,\n  JMP,\n  SPLIT,\n  GLOBAL_SAVE,\n  MATCH,\n  OGROUP,\n  CGROUP,\n  INCV,\n  JMP_LT,\n  SPLIT_LT,\n  LOOKAHEAD,\n  NEGATIVE_LOOKAHEAD,\n} = require('./constants')\n\nconst termContainsTag = (term, name) =>\n  Object.entries(term.tags || {})\n    .filter(([_k, v]) => v) //eslint-disable-line\n    .map((entry) => entry[0].toLowerCase())\n    .includes(name.toLowerCase())\n\n/**\n * Helper function, create a thread\n * Copies saved and groups.saved so that each thread contains its own\n * independent saved values.\n *\n * Note: Using the { saved, groups } allows passing a thread which will cause\n * its saved to be cloned.\n *\n * @param {int} pc - position of instance code to execute\n * @param {*[]} saved - matched objects that were saved\n * @param {object} groups - capture groups key of group id\n * @returns {object} thread\n */\nconst thread = (pc, { save = true, saved = [], groups = {}, vars = {} } = {}) => {\n  const ngroups = Object.values(groups).reduce((ng, g) => {\n    ng[g.id] = Object.assign({}, g)\n    ng[g.id].saved = g.saved.slice()\n    return ng\n  }, {})\n\n  return {\n    pc,\n    save,\n    saved: [...saved],\n    // clone groups.saved\n    groups: ngroups,\n    vars: Object.assign({}, vars),\n  }\n}\n\nconst addthread = (prog, list, th) => {\n  const inst = prog[th.pc]\n  //console.log(\"addthread:\", th.pc);\n  //console.log(\"  inst:\", inst);\n  switch (inst.code) {\n    case GLOBAL_SAVE:\n      th.save = inst.value\n      addthread(prog, list, thread(th.pc + 1, th))\n      break\n    case NOOP:\n      addthread(prog, list, thread(th.pc + 1, th))\n      break\n    case JMP:\n      addthread(prog, list, thread(inst.loc, th))\n      break\n    case SPLIT:\n      for (const loc of inst.locs) {\n        addthread(prog, list, thread(loc, th))\n      }\n      break\n    case OGROUP:\n      // again (see below comment in pikevm match), can modify thread\n      // because it ends here\n      th.groups[inst.id] = {\n        id: inst.id,\n        name: inst.name,\n        saved: [],\n        open: true,\n      }\n      addthread(prog, list, thread(th.pc + 1, th))\n      break\n    case CGROUP:\n      th.groups[inst.id].open = false\n      addthread(prog, list, thread(th.pc + 1, th))\n      break\n    case INCV:\n      th.vars[inst.varId] = (th.vars[inst.varId] || 0) + 1\n      addthread(prog, list, thread(th.pc + 1, th))\n      break\n    case JMP_LT:\n      if (th.vars[inst.varId] < inst.value) {\n        // jump!\n        addthread(prog, list, thread(inst.loc, th))\n      } else {\n        // continue\n        addthread(prog, list, thread(th.pc + 1, th))\n      }\n      break\n    case SPLIT_LT:\n      if (th.vars[inst.varId] < inst.value) {\n        // split!\n        for (const loc of inst.locs) {\n          addthread(prog, list, thread(loc, th))\n        }\n      } else {\n        // continue\n        addthread(prog, list, thread(th.pc + 1, th))\n      }\n      break\n    default:\n      list.push(th)\n      break\n  }\n}\n\n/**\n * Save a match to a thread.\n * Handles saving to open groups too\n * @param {object} th - the thread\n * @param {*] sp - the matched value to add\n * @return {object} the thread th\n */\nconst saveMatch = (th, sp) => {\n  if (!th.save) {\n    return th\n  }\n  // get the `saved` from the open buckets\n  let tmp = Object.values(th.groups)\n    .filter((g) => g.open)\n    .map((g) => g.saved)\n\n  const buckets = [th.saved].concat(tmp)\n  for (const saved of buckets) {\n    saved.push(sp)\n  }\n  return th\n}\n\n/**\n * Simulate pike's vm, see https://swtch.com/~rsc/regexp/regexp2.html\n * @param {object[]} inst - instructions to execute\n * @param {object[]} input - input word w/ terms\n * @returns true or false for match and saved matches\n */\nconst pikevm = (prog, input) => {\n  let clist = []\n  let nlist = []\n  let found = false\n  let groups = {}\n  let saved = []\n\n  // helps with match end and also matches that end at exactly the end so that\n  // the match function gets a chance to run.\n  const END = Symbol('END')\n  input = input.concat(END)\n\n  addthread(prog, clist, thread(0)) // and so we begin...\n  for (let i = 0; i < input.length; i++) {\n    if (clist.length === 0) {\n      break\n    }\n\n    const sp = input[i]\n\n    for (let j = 0; j < clist.length; j++) {\n      // can probably convert to clist.shift as optimization\n      const th = clist[j]\n      const inst = prog[th.pc]\n      //console.log(\"exec:\", inst);\n      //console.log(`  stack(${i}):`, clist);\n      let gotoNextWord = false\n      switch (inst.code) {\n        case MATCH_ANY:\n          // Note: can call save match like this without worrying about other\n          // threads because this thread ends here and another will be created\n          // in its place\n          if (sp !== END) {\n            addthread(prog, nlist, thread(th.pc + 1, saveMatch(th, sp)))\n          }\n          break\n        case MATCH_WORD:\n          if (sp.text && sp.text.toLowerCase() === inst.value.toLowerCase()) {\n            // continue on next word\n            addthread(prog, nlist, thread(th.pc + 1, saveMatch(th, sp)))\n          }\n          break\n        case MATCH_TAG:\n          if (termContainsTag(sp, inst.value)) {\n            addthread(prog, nlist, thread(th.pc + 1, saveMatch(th, sp)))\n          }\n          break\n        case MATCH_METHOD:\n          // call method using null coalescing on term, if it returns true continue\n          if (sp[inst.value]()) {\n            addthread(prog, nlist, thread(th.pc + 1, saveMatch(th, sp)))\n          }\n          break\n        case MATCH_END:\n          if (sp === END) {\n            // continue\n            addthread(prog, clist, thread(th.pc + 1, th))\n          }\n          break\n        case LOOKAHEAD:\n          const mla = pikevm(inst.prog, input.slice(i))\n          if (mla.found) {\n            addthread(prog, clist, thread(th.pc + 1, th))\n          }\n          break\n        case NEGATIVE_LOOKAHEAD:\n          const mnla = pikevm(inst.prog, input.slice(i))\n          if (!mnla.found) {\n            // continue at current position\n            // NOTE: this would be in addthread but we require access to input\n            addthread(prog, clist, thread(th.pc + 1, th))\n          }\n          break\n        case MATCH:\n          saved = th.saved\n          groups = th.groups\n          found = true\n          // Go to the next word which causes all pending threads in the\n          // current list (stack) to be cleared so we don't go down those\n          // paths. This allows for greedy and non-greedy matches to work.\n          gotoNextWord = true\n          break\n        default:\n          throw new Error(`Unsuppored Op code: ${inst.code}`)\n      }\n      if (gotoNextWord) {\n        break // continue next iteration\n      }\n    }\n    clist = nlist\n    nlist = []\n  }\n  if (found) {\n    return { found, saved, groups }\n  }\n  return { found }\n}\n\nmodule.exports = {\n  termContainsTag: termContainsTag,\n  pikevm: pikevm,\n}\n","const { Lexer } = require('chevrotain')\nconst { MatchParser, allTokens } = require('./parser')\nconst { pikevm } = require('./pikevm')\nconst NLPMatchLexer = new Lexer(allTokens)\nconst parserInstance = new MatchParser()\n\nclass NLPRegexParseError {\n  constructor(errors) {\n    this.errors = errors\n  }\n\n  get message() {\n    return this.errors[0].message\n  }\n\n  toString() {\n    return `NLP RegexP Parsing error: ${this.message}`\n  }\n}\n\n/**\n * Custom NLPRegexP class for regexp compile / cache.\n */\nclass NLPRegexP {\n  /**\n   * @param {string} regex - regular expression like string for matching nlp\n   * terms.\n   */\n  constructor(regex) {\n    if (regex.prog) {\n      // take another NLPRegexP\n      this.regex = regex.regex\n      this.prog = regex.prog.slice()\n      return\n    }\n\n    const { tokens } = NLPMatchLexer.tokenize(regex)\n    parserInstance.input = tokens\n    let parsed = null\n\n    try {\n      parsed = parserInstance.matchStatement()\n    } catch (e) {\n      // catch thrown error\n      throw new NLPRegexParseError([e])\n    }\n\n    if (parserInstance.errors.length > 0) {\n      throw new NLPRegexParseError(parserInstance.errors)\n    }\n\n    this.regex = regex\n    this.prog = parsed.prog\n  }\n\n  exec(docOrPhrase) {\n    switch (docOrPhrase.isA.toLowerCase()) {\n      case 'doc':\n        return this.execDoc(docOrPhrase)\n      case 'phrase':\n        return this.execPhrase(docOrPhrase)\n      default:\n        throw new Error('Invalid type, must be Document or Phrase')\n    }\n  }\n\n  execDoc(doc) {\n    return doc.buildFrom(\n      doc.list\n        .map((phrase) => {\n          return this.execPhrase(phrase)\n        })\n        .filter((p) => p !== null)\n    )\n  }\n\n  execPhrase(phrase) {\n    const { found, saved = [], groups = {} } = pikevm(this.prog, phrase.terms())\n\n    const namedGroups = Object.values(groups).reduce((arr, g) => {\n      let obj = Object.assign({}, arr)\n      let num = parseInt(g.id, 10)\n      obj[num] = {\n        group: g.name || `${g.id}`,\n        start: g.saved[0] ? g.saved[0].id || 0 : 0,\n        length: g.saved.length,\n      }\n      return obj\n    }, {})\n\n    return found && saved[0] && saved[0].id\n      ? phrase.buildFrom(saved[0].id, saved.length, namedGroups)\n      : null\n  }\n}\nmodule.exports = {\n  NLPMatchLexer: NLPMatchLexer,\n  parserInstance: parserInstance,\n  NLPRegexParseError: NLPRegexParseError,\n  NLPRegexP: NLPRegexP,\n}\n","// const { MatchParser } = require(\"./parser\")\nconst { NLPRegexP } = require('./regex')\n\n// nlp compromise plugin\nconst plugin = (Doc, _world, nlp, Phrase) => {\n  const preCompile = (regex) => new NLPRegexP(regex)\n  nlp.preCompile = preCompile\n\n  const strictMatch = function (regex) {\n    // function, non arrow, need bind for this which is doc/phrase\n    regex = new NLPRegexP(regex) // coerce the value\n    return regex.exec(this)\n  }\n  Doc.prototype.strictMatch = strictMatch\n  Phrase.prototype.strictMatch = strictMatch\n  // Doc.prototype.match = strictMatch\n  // Phrase.prototype.match = strictMatch\n}\nmodule.exports = plugin\n"],"names":["Symbol","EmbeddedActionsParser","require$$0","Lexer","createToken","NOOP","require$$1","MATCH_ANY","MATCH_TAG","MATCH_WORD","MATCH_METHOD","MATCH_END","JMP","SPLIT","GLOBAL_SAVE","MATCH","OGROUP","CGROUP","INCV","JMP_LT","SPLIT_LT","LOOKAHEAD","NEGATIVE_LOOKAHEAD","StartOf","name","pattern","EndOf","Tag","EscapedWord","Word","Method","Question","longer_alt","Exclamation","Equals","Pound","Dot","Pipe","Comma","Colon","Plus","Star","Zero","PositiveInt","LParenthesis","RParenthesis","LCurly","RCurly","NamedGroupBegin","NamedGroupEnd","WhiteSpace","group","SKIPPED","allTokens","MatchParser","$","RULE","matches","startOf","prog","endOf","OPTION","CONSUME","push","code","value","locs","loc","groups","SUBRULE","valueStatement","ARGS","OPTION1","ACTION","vars","inst","AT_LEAST_ONE","DEF","split","start","length","OR","ALT","image","substr","valueModifier","type","greedy","min","max","reverse","varId","minInst","maxInst","result","rangeModifier","CONSUME1","range","OPTION2","parseInt","Error","modifiers","capture","lookahead","negative","groupModifier","oProg","gId","id","jmps","AT_LEAST_ONE_SEP","SEP","jmp","pop","comment","nonCapturingGroup","namedGroup","negativeLookaheadGroup","positiveLookaheadGroup","performSelfAnalysis","termContainsTag","term","Object","entries","tags","filter","_k","v","map","entry","toLowerCase","includes","thread","pc","save","saved","ngroups","values","reduce","ng","g","assign","slice","addthread","list","th","open","saveMatch","sp","tmp","buckets","concat","pikevm","input","clist","nlist","found","END","i","j","gotoNextWord","text","mla","mnla","require$$2","NLPMatchLexer","parserInstance","NLPRegexParseError","errors","message","NLPRegexP","regex","tokenize","tokens","parsed","matchStatement","e","docOrPhrase","isA","execDoc","execPhrase","doc","buildFrom","phrase","p","terms","namedGroups","arr","obj","num","plugin","Doc","_world","nlp","Phrase","preCompile","strictMatch","exec","prototype"],"mappings":"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"}